[TOC]

# Spring 的前世今生
Spring 是一个开源的轻量级 JavaSE(Java 标准版本)/ JavaEE(Java 企业版本)开发应用框架,其目的是用于简化企业级应用程序开发

Spring 框架除了帮我们管理对象及其依赖关系,还提供像通用日志记录,性能统计,安全控制,异常处理等面向切面的能力,还能帮我管理最头疼的数据库事务,本身提供了一套简单的 JDBC 访问实现,提供与第三方数据访问框架集成(如 Hibernate,JPA), 与各种 JavaEE 技术整合(如 JavaMail, 任务调度等等),提供一套自己的 Web 层框架 SpringMVC, 而且还能非常简单的与第三方 Web 框架集成.从这里我们可以认为 Spring 是一个超级粘合大平台,除了自己提供功能外,还提供粘合其他技术和框架的能力,从而使我们可以更自由的选择到底使用什么技术进行开发

## 一切从 Bean 开始
## Spring 的设计初衷
Spring是为解决企业级应用开发的复杂性而设计,她可以做很多事.但归根到底支撑Spring的仅仅是少许的基本理念,而所有的这些基本理念都能可以追溯到一个最根本的使命:简化开发.Spring则立志于全方面的简化Java开发.对此,她主要采取了4个关键策略:
* 基于POJO的轻量级和最小侵入性编程
* 通过依赖注入和面向接口松耦合
* 基于切面和惯性进行声明式编程
* 通过切面和模板减少样板式代码

而他主要是通过:面向Bean(BOP),依赖注入(DI)以及面向切面(AOP)这三种方式来达成的

## BOP 编程伊始
Spring是面向Bean的编程(BeanOrientedProgramming,BOP),Bean在Spring中才是真正的主角.Bean在Spring中作用就像Object对OOP的意义一样,Spring中没有Bean也就没有Spring存在的意义.Spring提供了IOC容器通过配置文件或者注解的方式来管理对象之间的依赖关系

控制反转(其中最常见的实现方式叫做依赖注入(DependencyInjection,DI),还有一种方式叫“依赖查找”(DependencyLookup,DL),她在C++,Java,PHP以及.NET中都运用.在最早的Spring中是包含有依赖注入方法和依赖查询的,但因为依赖查询使用频率过低,不久就被Spring移除了,所以在Spring中控制反转也被直接称作依赖注入),她的基本概念是:不创建对象,但是描述创建它们的方式.在代码中不直接与对象和服务连接,但在配置文件中描述哪一个组件需要哪一项服务.容器(在Spring框架中是IOC容器)负责将这些联系在一起

在典型的IOC场景中,容器创建了所有对象,并设置必要的属性将它们连接在一起,决定什么时间调用方法

## 依赖注入的基本概念
Spring设计的核心org.springframework.beans包(架构核心是org.springframework.core包),它的设计目标是与JavaBean组件一起使用.这个包通常不是由用户直接使用,而是由服务器将其用作其他多数功能的底层中介.下一个最高级抽象是BeanFactory接口,它是工厂设计模式的实现,允许通过名称创建和检索对象.BeanFactory也可以管理对象之间的关系

BeanFactory最底层支持两个对象模型
* 单例:提供了具有特定名称的全局共享实例对象,可以在查询时对其进行检索.Singleton是默认的也是最常用的对象模型
* 原型:确保每次检索都会创建单独的实例对象.在每个用户都需要自己的对象时,采用原型模式

Bean工厂的概念是Spring作为IOC容器的基础.IOC则将处理事情的责任从应用程序代码转移到框架

## AOP 编程理念
面向切面编程,即AOP,是一种编程思想,它允许程序员对横切关注点或横切典型的职责分界线的行为(例如日志和事务管理)进行模块化.AOP的核心构造是方面(切面),它将那些影响多个类的行为封装到可重用的模块中

AOP和IOC是补充性的技术,它们都运用模块化方式解决企业应用程序开发中的复杂问题.在典型的面向对象开发方式中,可能要将日志记录语句放在所有方法和Java类中才能实现日志功能.在AOP方式中,可以反过来将日志服务模块化,并以声明的方式将它们应用到需要日志的组件上.当然,优势就是Java类不需要知道日志服务的存在,也不需要考虑相关的代码.所以,用SpringAOP编写的应用程序代码是松散耦合的

AOP的功能完全集成到了Spring事务管理,日志和其他各种特性的上下文中

AOP编程的常用场景有:Authentication(权限认证),AutoCaching(自动缓存处理),ErrorHandling(统一错误处理),Debugging(调试信息输出),Logging(日志记录),Transactions(事务处理)等

# Spring中的编程思想总结
## Spring编程思想
| Spring思想 | 应用场景(特点) | 一句话归纳 |
| --- | --- | --- |
| OOP | ObjectOrientedProgramming(面向对象编程)用程序归纳总结生活中一切事物 | 封装,继承,多态 |
| BOP | BeanOrientedProgramming(面向Bean编程)面向Bean(普通的Java类)设计程序,解放程序员 | —切从Bean开始 |
| AOP | AspectOrientedProgramming(面向切面编程)找出多个类中有一定规律的代码,开发时拆开,运行时再合并,面向切面编程,即面向规则编程 | 解耦,专人做专事 |
| IOC | InversionofControl(控制反转)将new对象的动作交给Spring管理,并由Spring保存已创建的对象(IOC容器) | 转交控制权(即控制权反转) |
| DI/DL | DependencyInjection(依赖注入)或者DependencyLook叩(依赖查找)依赖注入,依赖查找,Spring不仅保存自己创建的对象,而且保存对象与对象之间的关系.注入即赋值,主要三种方式构造方法,set方法,直接赋值 | 赋值 |

## Spring注解编程
### Spring Framework 1.x注解驱动启蒙时代
从SpringFramework1.2.0版本开始,开始支持Annotation,虽然框架层面均已支持@managedResource和@Transactional等,但是其主要的还是以XML配置为准

### Spring Framework 2.X注解驱动过渡时代
SpringFramework2.0在Annotation支持方面添加了新的成员,@Required,数据相关的@Repository及AOP相关的@Aspect等,但同时提升了XML配置能力,即"可扩展的XML编写ExtensibleXMLauthoring)〃,当然的,这种扩展能力的出现,无形中为XML的配置增加了筹码

### Spring Framework 2.5引入了新的骨架式 Annotation
@Service
@Controller,@RequestMapping及@ModelAttribute
SpringFramework2.5还支持了JSR-250(Java规范)
©Resource注入
@PostConstruct替代<beaninit-method="..."/>
@PreDestroy替代<beandestroy-method="..."/>

尽管SpringFramework2.X时代提供了为数不少的注解,然而编程的手段却不多,最主要的原因在于框架层面仍未“直接"提供驱动注解的Spring应用上下文,并且仍需要XML驱动,\<context:annotation-config\>和\<context:component-scan\>

### Spring Framework 3.x注解驱动黄金时代
SpringFramework3.x是一个里程碑式的时代,3.0除了提升Spring模式注解"派生"的层次性,首要任务是替换XML配置方式,引入配置类注解@Configuration,该注解是内建的@Component的"派生"注解,遗憾的是,3.0并没有引入\<context:component-scan\>的注解,而是选择过渡方案 @ImportResource 和@Import,ImportResource负责导入遗留的XML配置文件,Import允许导入一个或多个类作为SpringBean

3.0引入 AnnotationConfigApplicationContext 最为前时代ApplicationContext的替代者,3.1新引入注解@ComponentScan,替换XML的\<context:component-scan\>,成为全面进入注解驱动时代的一大步

SpringFramework3.x注解提升还体现在以下方面:
定义声明中,@Bean允许使用注解@Role设置其角色,使得Spring应用上下文具备条件化Bean定义的能力方面

@RequestHeader,@CookieVale和@RequestPart出现,使得不必使用ServletAPI
以及配置属性源抽象PropertySources,奠定了SpringBoot外部化配置的基础

配套的注解@Caching和@Cacheable极大简化数据缓存的开发

周期异步@Schedule及异步web请求DeferredResult

### Spring Framework 4.x注解驱动完善时代
3.1开始提供@Profile提供了配置化的条件组装,不过这方面还是比较单一的
4.0开始,引入条件化注解@Conditional,通过自定义Condition实现配合,弥补之前版本条件化装配的短板
4.0开始Profile反过来通过@Conditional实现

Java8开始对提供@Repeatable,Framework4.0巧妙的兼容了JSR-310.根据特性,将@PropertySources@ComponentScan提升为可重复使用的注解@PropertySources,@ComponentScans

4.2开始新增了事件监听器注解@EventListener,作为ApplicationListener接口编程的第二选择
@AliasFor解除注解派生的时候冲突限制

在浏览器跨域资源访问方面引入@CrossOrigin,作为CorsRegistry替换注解方案

### SpringFramework 5.x注解驱动成熟时代
SpringFramework5.0作为SpringBoot2.0的底层,注解驱动的性能提升不是那么明显.在SpringBoot应用场景中,大量使用@ComponentScan扫描,导致Spring模式的注解解析时间耗时越长,面对这个问题,5.0引入@Indexed,为Spring模式注解添加索引

# Spring5 系统架构
Spring总共大约有20个模块,由1300多个不同的文件构成.而这些组件被分别整合在核心容器(CoreContainer),AOP(AspectOrientedProgramming)和设备支持(Instrmentation),数据访问及集成(DataAccess/Integeration),Web,报文发送(Messaging),Test,6个模块集合中.以下是Spring5的模块结构图:

![](http://huaweirookie.oss-cn-shenzhen.aliyuncs.com/1586425906081.png)

组成Spring框架的每个模块集合或者模块都可以单独存在,也可以一个或多个模块联合实现.每个模块的组成和功能如下:

## 核心容器
由spring-beans,spring-core,spring-context和spring-expression(SpringExpressionLanguage,SpEL)4个模块组成

spring-core和spring-beans模块是Spring框架的核心模块,包含了控制反转(InversionofControl,IOC)和依赖注入(DependencyInjection,DI).BeanFactory接口是Spring框架中的核心接口,它是工厂模式的具体实现.BeanFactory使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离.但BeanFactory容器实例化后并不会自动实例化Bean,只有当Bean被使用时BeanFactory容器才会对该Bean进行实例化与依赖关系的装配

spring-context模块构架于核心模块之上,他扩展了BeanFactory,为她添加了Bean生命周期控制,框架事件体系以及资源加载透明化等功能.此外该模块还提供了许多企业级支持,如邮件访问,远程访问,任务调度等,ApplicationContext是该模块的核心接口,她的超类是BeanFactory.与BeanFactory不同,ApplicationContext容器实例化后会自动对所有的单实例Bean进行实例化与依赖关系的装配,使之处于待用状态

spring-context-support模块是对SpringIOC容器的扩展支持,以及IOC子容器

spring-context-indexer模块是Spring的类管理组件和Classpath扫描

spring-expression模块是统一表达式语言(EL)的扩展模块,可以查询,管理运行中的对象,同时也方便的可以调用对象方法,操作数组,集合等.它的语法类似于传统EL,但提供了额外的功能,最出色的要数函数调用和简单字符串的模板函数.这种语言的特性是基于Spring产品的需求而设计,他可以非常方便地同SpringIOC进行交互

## AOP 和设备支持
由spring-aop,spring-aspects和spring-instrument3个模块组成

spring-aop是Spring的另一个核心模块,是AOP主要的实现模块.作为继OOP后,对程序员影响最大的编程思想之一,AOP极大地开拓了人们对于编程的思路.在Spring中,他是以JVM的动态代理技术为基础,然后设计出了一系列的AOP横切实现,比如前置通知,返回通知,异常通知等,同时,Pointcut接口来匹配切入点,可以使用现有的切入点来设计横切面,也可以扩展相关方法根据需求进行切入

spring-aspects模块集成自AspectJ框架,主要是为SpringAOP提供多种AOP实现方法

spring-instrument模块是基于JAVASE中的"java.lang.instrument"进行设计的,应该算是AOP的一个支援模块,主要作用是在JVM启用时,生成一个代理类,程序员通过代理类在运行时修改类的字节,从而改变一个类的功能,实现AOP的功能.在分类里把他分在了AOP模块下,在Spring官方文档里对这个地方也有点含糊不清,这里是纯个人观点

## 数据访问与集成
由spring-jdbc,spring-tx,spring-orm,spring-jms和spring-oxm5个模块组成

spring-jdbc模块是Spring提供的JDBC抽象框架的主要实现模块,用于简化SpringJDBC操作.主要是提供JDBC模板方式,关系数据库对象化方式,SimpleJdbc方式,事务管理来简化JDBC编程,主要实现类是JdbcTemplate,SimpleJdbcTemplate以及NamedParameterJdbcTemplate

spring-tx模块是SpringJDBC事务控制实现模块.使用Spring框架,它对事务做了很好的封装,通过它的AOP配置,可以灵活的配置在任何一层；但是在很多的需求和应用,直接使用JDBC事务控制还是有其优势的.其实,事务是以业务逻辑为基础的；一个完整的业务应该对应业务层里的一个方法；如果业务操作失败,则整个事务回滚；所以,事务控制是绝对应该放在业务层的；但是,持久层的设计则应该遵循一个很重要的原则:保证操作的原子性,即持久层里的每个方法都应该是不可以分割的.所以,在使用SpringJDBC事务控制时,应该注意其特殊性

spring-orm模块是ORM框架支持模块,主要集成Hibernate,JavaPersistenceAPI(JPA)和JavaDataObjects(JDO)用于资源管理,数据访问对象(DAO)的实现和事务策略

spring-oxm模块主要提供一个抽象层以支撑OXM(OXM是Object-to-XML-Mapping的缩写,它是一个O/M-mapper,将java对象映射成XML数据,或者将XML数据映射成java对象),例如:JAXB,Castor,XMLBeans,JiBX和XStream等

spring-jms模块(JavaMessagingService)能够发送和接收信息,自SpringFramework4.1以后,他还提供了对spring-messaging模块的支撑

## Web 组件
由spring-web,spring-webmvc,spring-websocket和spring-webflux4个模块组成

spring-web模块为Spring提供了最基础Web支持,主要建立于核心容器之上,通过Servlet或者Listeners来初始化IOC容器,也包含一些与Web相关的支持

spring-webmvc 模块众所周知是一个的 Web-Servlet 模块,实现了 Spring MVC(model-view-Controller) 的 Web 应用

spring-websocket模块主要是与Web前端的全双工通讯的协议

spring-webflux 是一个新的非堵塞函数式 ReactiveWeb 框架,可以用来建立异步的,非阻塞,事件驱动的服务,并且扩展性非常好

## 通信报文
即 spring-messaging 模块,是从 Spring 4 开始新加入的一个模块,主要职责是为 Spring 框架集成一些基础的报文传送应用

## 集成测试
即 spring-test 模块,主要为测试提供支持的,毕竟在不需要发布(程序)到你的应用服务器或者连接到其他企业设施的情况下能够执行一些集成测试或者其他测试对于任何企业都是非常重要的

## 集成兼容
即 spring-framework-bom 模块,Bill of Materials 解决 Spring 的不同模块依赖版本不同问题

## 各模块之间的依赖关系
Spring官网对Spring5各模块之间的关系也做了详细说明:
![](http://huaweirookie.oss-cn-shenzhen.aliyuncs.com/1586425906082.png)

对Spring5各模块做了一次系统的总结,描述模块之间的依赖关系,希望能对小伙伴们有所帮助
![](http://huaweirookie.oss-cn-shenzhen.aliyuncs.com/1586425906083.png)

# Spring版本命名规则
Spring版本命名规则
| 描述方式 | 说明 | 含义 |
| --- | --- | --- |
| Snapshot | 快照版 | 尚不不稳定,尚处于开发中的版本 |
| Release | 稳定版 | 功能相对稳定,可以对外发行,但有时间限制 |
| GA | 正式版 | 代表广泛可用的穏定版(General Availability) |
| M | 里程碑版 | (M是Milestone的意思)具有一些全新的功能或是具有里程碑意义的版本 |
| RC | 终测版 | ReleaseCandidate(最终测试),即樹乍为正式版发布 |